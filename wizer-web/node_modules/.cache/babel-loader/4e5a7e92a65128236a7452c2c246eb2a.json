{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Olti\\\\Desktop\\\\wizer\\\\wizer-web\\\\src\\\\components\\\\pomodoro\\\\Pomodoro.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Button from '@material-ui/core/Button'; // import ButtonGroup from '@material-ui/core/ButtonGroup';\n// import Card from '@material-ui/core/Card';\n\nimport Typography from '@material-ui/core/Typography';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    alignItems: 'center',\n    marginTop: '10%'\n  },\n  circle: {\n    width: '400px',\n    height: '400px',\n    border: '2px dashed black',\n    borderRadius: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column',\n    backgroundColor: '#f0f0f0'\n  }\n});\n\nfunction Pomodoro() {\n  _s();\n\n  const classes = useStyles();\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(5);\n  const [rest, setRest] = useState(2);\n  const [displayMessage, setDisplayMessage] = useState(false);\n  const [start, setStart] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n\n  const timer = () => {\n    let interval = setInterval(() => {\n      clearInterval(interval);\n\n      if (seconds === 0) {\n        if (minutes !== 0) {\n          setSeconds(59);\n          setMinutes(minutes - 1);\n        } else {\n          let minutes_ = displayMessage ? minutes - 1 : rest - 1;\n          let seconds = 59;\n          setSeconds(seconds);\n          setMinutes(minutes_);\n          setDisplayMessage(!displayMessage);\n        }\n      } else {\n        setSeconds(seconds - 1);\n      }\n    }, 1000);\n  };\n\n  const initiateTimer = () => {\n    if (start) {\n      timer();\n    }\n  };\n\n  const renderSettingsButtons = () => {\n    if (showSettings) {\n      const workButtons = [15, 25, 35];\n      const restButtons = [5, 10, 15];\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body\",\n          children: \"Set the work duration: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), workButtons.map(button => {\n          return /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              setMinutes(button - 1);\n            },\n            children: [button, \" minutes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body\",\n          children: \"Set the rest duration: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), restButtons.map(button => {\n          return /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              setRest(button);\n            },\n            children: [button, \" minutes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this);\n        })]\n      }, void 0, true);\n    }\n  };\n\n  const timerMinutes = minutes < 10 ? `0${minutes}` : minutes;\n  const timerSeconds = seconds < 10 ? `0${seconds}` : seconds;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: displayMessage && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          children: \"Break time! New session starts in:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 40\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.circle,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h1\",\n          children: [timerMinutes, \":\", timerSeconds]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setStart(!start),\n          children: start ? 'Stop' : 'Start'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), initiateTimer()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setShowSettings(!showSettings),\n        style: {\n          height: 40\n        },\n        children: /*#__PURE__*/_jsxDEV(SettingsIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 90\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: '1%'\n        },\n        children: renderSettingsButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Pomodoro, \"KZWFKRFaPZffk5RGv34IivfQWY0=\", false, function () {\n  return [useStyles];\n});\n\n_c = Pomodoro;\nexport default Pomodoro;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pomodoro\");","map":{"version":3,"sources":["C:/Users/Olti/Desktop/wizer/wizer-web/src/components/pomodoro/Pomodoro.js"],"names":["React","useState","Button","Typography","SettingsIcon","makeStyles","useStyles","root","display","justifyContent","flexDirection","alignItems","marginTop","circle","width","height","border","borderRadius","backgroundColor","Pomodoro","classes","minutes","setMinutes","seconds","setSeconds","rest","setRest","displayMessage","setDisplayMessage","start","setStart","showSettings","setShowSettings","timer","interval","setInterval","clearInterval","minutes_","initiateTimer","renderSettingsButtons","workButtons","restButtons","map","button","timerMinutes","timerSeconds","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\n// import ButtonGroup from '@material-ui/core/ButtonGroup';\r\n// import Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection:'column',\r\n        alignItems: 'center',\r\n        marginTop:'10%',\r\n    },\r\n    circle:{\r\n        width: '400px',\r\n        height: '400px',\r\n        border: '2px dashed black',\r\n        borderRadius: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        flexDirection:'column',\r\n        backgroundColor:'#f0f0f0',\r\n    }\r\n  });\r\n\r\n\r\n\r\nfunction Pomodoro() {\r\n    const classes = useStyles()\r\n    \r\n    const[minutes, setMinutes] = useState(0);\r\n    const[seconds, setSeconds] = useState(5);\r\n\r\n    const[rest, setRest] = useState(2);\r\n    const[displayMessage, setDisplayMessage] = useState(false);\r\n    const[start, setStart] = useState(false);\r\n    const[showSettings, setShowSettings] = useState(false);\r\n  \r\n    const timer=()=>{\r\n        let interval = setInterval(() => {\r\n            clearInterval(interval);\r\n    \r\n            if (seconds === 0) {\r\n                if (minutes !== 0) {\r\n                setSeconds(59);\r\n                setMinutes(minutes - 1);\r\n                } else {\r\n                let minutes_ = displayMessage ? minutes-1 : rest-1;\r\n                let seconds = 59;\r\n    \r\n                setSeconds(seconds);\r\n                setMinutes(minutes_);\r\n                setDisplayMessage(!displayMessage);\r\n                }\r\n            } else {\r\n                setSeconds(seconds - 1);\r\n            }\r\n            }, 1000)\r\n    }\r\n\r\n    const initiateTimer=()=>{\r\n        if(start){\r\n            timer()\r\n        }\r\n    }\r\n\r\n    const renderSettingsButtons=()=>{\r\n        if(showSettings){\r\n            const workButtons = [15, 25, 35]\r\n            const restButtons = [5, 10, 15]\r\n            return(\r\n                <>\r\n                    <Typography variant=\"body\">Set the work duration: </Typography>\r\n                    {workButtons.map(button=>{\r\n                        return(\r\n                        <Button onClick={()=>{\r\n                            setMinutes(button-1)\r\n                        }}>{button} minutes</Button>\r\n                        )\r\n                    })}\r\n                    <br/>\r\n                    <Typography variant=\"body\">Set the rest duration: </Typography>\r\n                    {restButtons.map(button=>{\r\n                        return(\r\n                        <Button onClick={()=>{\r\n                            setRest(button)\r\n                        }}>{button} minutes</Button>\r\n                        )\r\n                    })}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    const timerMinutes = minutes < 10 ? `0${minutes}` : minutes;\r\n    const timerSeconds = seconds < 10 ? `0${seconds}` : seconds;\r\n\r\n    return(\r\n        <>\r\n            <div className={classes.root}>\r\n                <div className=\"message\">\r\n                    {displayMessage && <Typography variant=\"h5\">Break time! New session starts in:</Typography>}\r\n                </div>\r\n                <br/>\r\n                <div className={classes.circle}>\r\n                    \r\n                    <Typography variant=\"h1\">\r\n                        {timerMinutes}:{timerSeconds}\r\n                    </Typography>\r\n                    <Button onClick={()=>setStart(!start)}>{start? 'Stop': 'Start'}</Button>\r\n                </div>\r\n                {initiateTimer()}\r\n            \r\n            </div>\r\n            <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                <Button onClick={()=>setShowSettings(!showSettings)} style={{height:40}}><SettingsIcon/></Button>\r\n                <div style={{marginLeft: '1%'}}>\r\n                    {renderSettingsButtons()}\r\n                </div>\r\n            </div>\r\n            \r\n        </>\r\n    );\r\n    }\r\n\r\nexport default Pomodoro\r\n"]},"metadata":{},"sourceType":"module"}