{"ast":null,"code":"import axios from 'axios';\nconst axiosInstance = axios.create({\n  timeout: 5000,\n  headers: {\n    Authorization: localStorage.getItem('access_token') ? `Bearer ${localStorage.getItem('access_token')}` // this is like saying 'Bearer 49582048902485kfjdkj'\n    : null,\n    // so it's just the access token on the header \n    'Content-Type': 'application/json',\n    // if there is a token format it, else return null\n    accept: 'application/json'\n  }\n});\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, error => {\n  return new Promise(resolve => {\n    const originalRequest = error.config;\n    const refreshToken = localStorage.get('refresh_token');\n\n    if (error.response && error.response.status === 401 && error.config && !error.config.__isRetryRequest && refreshToken) {\n      originalRequest._retry = true;\n      const response = fetch(api.refreshToken, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refresh: refreshToken\n        })\n      }).then(res => res.json()).then(res => {\n        localStorage.set(res.access, 'token');\n        return axios(originalRequest);\n      });\n      resolve(response);\n    }\n\n    return Promise.reject(error);\n  });\n});\nexport default axiosInstance;","map":{"version":3,"sources":["C:/Users/Olti/Desktop/wizer/wizer-web/src/axios.js"],"names":["axios","axiosInstance","create","timeout","headers","Authorization","localStorage","getItem","accept","interceptors","response","use","error","Promise","resolve","originalRequest","config","refreshToken","get","status","__isRetryRequest","_retry","fetch","api","method","body","JSON","stringify","refresh","then","res","json","set","access","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAE,IADsB;AAE/BC,EAAAA,OAAO,EAAE;AACLC,IAAAA,aAAa,EAAEC,YAAY,CAACC,OAAb,CAAqB,cAArB,IACZ,UAASD,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAqC,EADlC,CACmC;AADnC,MAEb,IAHG;AAG0C;AAC/C,oBAAgB,kBAJX;AAI0C;AAC/CC,IAAAA,MAAM,EAAE;AALH;AAFsB,CAAb,CAAtB;AAYAP,aAAa,CAACQ,YAAd,CAA2BC,QAA3B,CAAoCC,GAApC,CACKD,QAAD,IAAc;AACZ,SAAOA,QAAP;AACD,CAHL,EAIKE,KAAD,IAAW;AACT,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9B,UAAMC,eAAe,GAAGH,KAAK,CAACI,MAA9B;AACA,UAAMC,YAAY,GAAGX,YAAY,CAACY,GAAb,CAAiB,eAAjB,CAArB;;AACA,QAAIN,KAAK,CAACF,QAAN,IAAkBE,KAAK,CAACF,QAAN,CAAeS,MAAf,KAA0B,GAA5C,IAAmDP,KAAK,CAACI,MAAzD,IAAmE,CAACJ,KAAK,CAACI,MAAN,CAAaI,gBAAjF,IAAqGH,YAAzG,EAAuH;AACrHF,MAAAA,eAAe,CAACM,MAAhB,GAAyB,IAAzB;AAEA,YAAMX,QAAQ,GAAGY,KAAK,CAACC,GAAG,CAACN,YAAL,EAAmB;AACvCO,QAAAA,MAAM,EAAE,MAD+B;AAEvCpB,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAF8B;AAKvCqB,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,UAAAA,OAAO,EAAEX;AADU,SAAf;AALiC,OAAnB,CAAL,CASdY,IATc,CASRC,GAAD,IAASA,GAAG,CAACC,IAAJ,EATA,EAUdF,IAVc,CAURC,GAAD,IAAS;AACbxB,QAAAA,YAAY,CAAC0B,GAAb,CAAiBF,GAAG,CAACG,MAArB,EAA6B,OAA7B;AAEA,eAAOjC,KAAK,CAACe,eAAD,CAAZ;AACD,OAdc,CAAjB;AAeAD,MAAAA,OAAO,CAACJ,QAAD,CAAP;AACD;;AAED,WAAOG,OAAO,CAACqB,MAAR,CAAetB,KAAf,CAAP;AACD,GAzBM,CAAP;AA0BD,CA/BL;AAmCA,eAAeX,aAAf","sourcesContent":["import axios from 'axios'\r\n\r\n\r\nconst axiosInstance = axios.create({\r\n    timeout: 5000,\r\n    headers: {\r\n        Authorization: localStorage.getItem('access_token')\r\n        ? `Bearer ${localStorage.getItem('access_token')}`// this is like saying 'Bearer 49582048902485kfjdkj'\r\n        : null,                                        // so it's just the access token on the header \r\n        'Content-Type': 'application/json',            // if there is a token format it, else return null\r\n        accept: 'application/json'\r\n    },\r\n})\r\n\r\n\r\naxiosInstance.interceptors.response.use(\r\n    (response) => {\r\n      return response\r\n    },\r\n    (error) => {\r\n      return new Promise((resolve) => {\r\n        const originalRequest = error.config\r\n        const refreshToken = localStorage.get('refresh_token')\r\n        if (error.response && error.response.status === 401 && error.config && !error.config.__isRetryRequest && refreshToken) {\r\n          originalRequest._retry = true\r\n  \r\n          const response = fetch(api.refreshToken, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              refresh: refreshToken,\r\n            }),\r\n          })\r\n            .then((res) => res.json())\r\n            .then((res) => {\r\n              localStorage.set(res.access, 'token')\r\n  \r\n              return axios(originalRequest)\r\n            })\r\n          resolve(response)\r\n        }\r\n  \r\n        return Promise.reject(error)\r\n      })\r\n    },\r\n  )\r\n\r\n\r\nexport default axiosInstance"]},"metadata":{},"sourceType":"module"}