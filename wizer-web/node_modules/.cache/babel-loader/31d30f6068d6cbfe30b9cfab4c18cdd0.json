{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Olti\\\\Desktop\\\\wizer\\\\wizer-web\\\\src\\\\components\\\\pomodoro\\\\Pomodoro.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Button from '@material-ui/core/Button'; // import ButtonGroup from '@material-ui/core/ButtonGroup';\n// import Card from '@material-ui/core/Card';\n\nimport Typography from '@material-ui/core/Typography';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    margin: '10% 0'\n  },\n  circle: {\n    width: '400px',\n    height: '400px',\n    border: '2px dashed black',\n    borderRadius: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column',\n    backgroundColor: '#f0f0f0'\n  }\n});\n\nfunction Pomodoro() {\n  _s();\n\n  const classes = useStyles();\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(10);\n  const [displayMessage, setDisplayMessage] = useState(false);\n  const [start, setStart] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n\n  const timer = () => {\n    let interval = setInterval(() => {\n      clearInterval(interval);\n\n      if (seconds === 0) {\n        if (minutes !== 0) {\n          setSeconds(59);\n          setMinutes(minutes - 1);\n        } else {\n          let minutes = displayMessage ? 24 : 4;\n          let seconds = 59;\n          setSeconds(seconds);\n          setMinutes(minutes);\n          setDisplayMessage(!displayMessage);\n        }\n      } else {\n        setSeconds(seconds - 1);\n      }\n    }, 1000);\n  };\n\n  const initiateTimer = () => {\n    if (start) {\n      timer();\n    }\n  };\n\n  const renderPage = () => {\n    if (showSettings) {\n      const buttons = [15, 25, 35];\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.root,\n          children: [buttons.map(button => {\n            /*#__PURE__*/\n            _jsxDEV(Button, {\n              onClick: () => {\n                setMinutes(button);\n              },\n              children: [button, \" mintues\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 29\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setShowSettings(!showSettings),\n            children: /*#__PURE__*/_jsxDEV(SettingsIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 78\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.root,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message\",\n            children: displayMessage && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              children: \"Break time! New session starts in:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 44\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.circle,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h1\",\n              children: [timerMinutes, \":\", timerSeconds]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => setStart(!start),\n              children: start ? 'Stop' : 'Start'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }, this), initiateTimer()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setShowSettings(!showSettings),\n          children: /*#__PURE__*/_jsxDEV(SettingsIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 74\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true);\n    }\n  };\n\n  const timerMinutes = minutes < 10 ? `0${minutes}` : minutes;\n  const timerSeconds = seconds < 10 ? `0${seconds}` : seconds;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: renderPage()\n  }, void 0, false);\n}\n\n_s(Pomodoro, \"6l744tcHwjaEyc5XLQ6HleMmUmM=\", false, function () {\n  return [useStyles];\n});\n\n_c = Pomodoro;\nexport default Pomodoro;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pomodoro\");","map":{"version":3,"sources":["C:/Users/Olti/Desktop/wizer/wizer-web/src/components/pomodoro/Pomodoro.js"],"names":["React","useState","Button","Typography","SettingsIcon","makeStyles","useStyles","root","display","justifyContent","flexDirection","margin","circle","width","height","border","borderRadius","alignItems","backgroundColor","Pomodoro","classes","minutes","setMinutes","seconds","setSeconds","displayMessage","setDisplayMessage","start","setStart","showSettings","setShowSettings","timer","interval","setInterval","clearInterval","initiateTimer","renderPage","buttons","map","button","timerMinutes","timerSeconds"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\n// import ButtonGroup from '@material-ui/core/ButtonGroup';\r\n// import Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection:'row',\r\n        margin:'10% 0',\r\n    },\r\n    circle:{\r\n        width: '400px',\r\n        height: '400px',\r\n        border: '2px dashed black',\r\n        borderRadius: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        flexDirection:'column',\r\n        backgroundColor:'#f0f0f0',\r\n    }\r\n  });\r\n\r\n\r\n\r\nfunction Pomodoro() {\r\n    const classes = useStyles()\r\n    \r\n    const[minutes, setMinutes] = useState(0);\r\n    const[seconds, setSeconds] = useState(10);\r\n    const[displayMessage, setDisplayMessage] = useState(false);\r\n    const[start, setStart] = useState(false);\r\n    const[showSettings, setShowSettings] = useState(false);\r\n  \r\n    const timer=()=>{\r\n        let interval = setInterval(() => {\r\n            clearInterval(interval);\r\n    \r\n            if (seconds === 0) {\r\n                if (minutes !== 0) {\r\n                setSeconds(59);\r\n                setMinutes(minutes - 1);\r\n                } else {\r\n                let minutes = displayMessage ? 24 : 4;\r\n                let seconds = 59;\r\n    \r\n                setSeconds(seconds);\r\n                setMinutes(minutes);\r\n                setDisplayMessage(!displayMessage);\r\n                }\r\n            } else {\r\n                setSeconds(seconds - 1);\r\n            }\r\n            }, 1000)\r\n    }\r\n\r\n    const initiateTimer=()=>{\r\n        if(start){\r\n            timer()\r\n        }\r\n    }\r\n\r\n    const renderPage=()=>{\r\n        if(showSettings){\r\n            const buttons=[15, 25, 35]\r\n            return(\r\n                <>\r\n                    <div className={classes.root}>\r\n                        {buttons.map(button=>{\r\n                            <Button onClick={()=>{setMinutes(button)}}>{button} mintues</Button>\r\n                        })}\r\n                        <Button onClick={()=>setShowSettings(!showSettings)}><SettingsIcon/></Button>\r\n                    </div>\r\n                </>\r\n            )\r\n        } else{\r\n            return(\r\n                <>\r\n                    <div className={classes.root}>\r\n                    <div className=\"message\">\r\n                        {displayMessage && <Typography variant=\"h5\">Break time! New session starts in:</Typography>}\r\n                    </div>\r\n                    <div className={classes.circle}>\r\n                        \r\n                        <Typography variant=\"h1\">\r\n                            {timerMinutes}:{timerSeconds}\r\n                        </Typography>\r\n                        <Button onClick={()=>setStart(!start)}>{start? 'Stop': 'Start'}</Button>\r\n                    </div>\r\n                    {initiateTimer()}\r\n                    </div>\r\n                    <Button onClick={()=>setShowSettings(!showSettings)}><SettingsIcon/></Button>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    const timerMinutes = minutes < 10 ? `0${minutes}` : minutes;\r\n    const timerSeconds = seconds < 10 ? `0${seconds}` : seconds;\r\n\r\n    return(\r\n        <>\r\n            {renderPage()}\r\n        </>\r\n    );\r\n    }\r\n\r\nexport default Pomodoro\r\n"]},"metadata":{},"sourceType":"module"}